import Bool open
import Equality open

Demorgan0 : {a : Bool, b : Bool} -> Type
  not(or(a,b)) == and(not(a), not(b))

demorgan0 : {a : Bool, b : Bool} -> Demorgan0(a, b)
  (@ a      ~> {b : Bool} -> Demorgan0(self, b)
  | true    => {b}
    @Bool b ~> Demorgan0(true, self)
    | true  => refl<false>
    | false => refl<false>
  | false   => {b}
    @Bool b ~> Demorgan0(false, self)
    | true  => refl<false>
    | false => refl<true>)(b)

Demorgan1 : {a : Bool, b : Bool} -> Type
  not(and(a,b)) == or(not(a), not(b))

demorgan1 : {a : Bool, b : Bool} -> Demorgan1(a, b)
  (@ a      ~> {b : Bool} -> Demorgan1(self, b)
  | true    => {b}
    @Bool b ~> Demorgan1(true, self)
    | true  => refl<false>
    | false => refl<true>
  | false   => {b}
    @Bool b ~> Demorgan1(false, self)
    | true  => refl<true>
    | false => refl<true>)(b)



main [demorgan0, demorgan1]
