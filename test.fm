import Base@0 open

true_not_false : {e : true == false} -> Empty
  unit :: rewrite x
    in case/Bool x
       | true  => Unit
       | false => Empty
       : Type
    with e

false_not_true : {e : false == true} -> Empty
  true_not_false(sym(~e))

main : {case x : Bool} -> [y : Bool, ~Not(x == y)]
| true  => [false, ~true_not_false]
| false => [true , ~false_not_true]


// Proof that 'true != false'
true_not_false : {e : true == false} -> Empty
  unit :: rewrite x
    in case/Bool x
       | true  => Unit
       | false => Empty
       : Type
    with e

// Proof that 'false != true'
false_not_true : {e : false == true} -> Empty
  true_not_false(sym(~e))

// The requested program receives a Bool, x
// If 'x == true', it returns 'false' and proves 'true != false'
// If 'x == false', it returns 'true' and proves 'false != true'
main : {case x : Bool} -> [y : Bool, ~Not(x == y)]
| true  => [false, ~true_not_false]
| false => [true , ~false_not_true]
