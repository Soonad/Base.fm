import Magma as M
import Semigroup as S

T Monoid<A:Type>
| mkMonoid
  { f           : A -> A -> A
  , e           : A
  , associative : M/Associative(A,f)
  , identity    : M/Identity(A,f,e)
  }

// accessors
get.f : {~A : Type, case m : Monoid(A)} -> (A -> A -> A)
| mkMonoid => m.f

get.associative : {~A:Type, case m:Monoid(A)} -> M/Associative(A,get.f<A>(m))
| mkMonoid => m.associative

// Monoids are Semigroups
toSemigroup : {~A : Type, case m : Monoid(A)} -> S/Semigroup(A)
| mkMonoid => S/mkSemigroup<A>(m.f, m.associative)


//[ERROR]
//Type mismatch.
//- Found type... Identity(A, get.f(s), e)
//- Instead of... Identity(A, f, e)
//fromSemigroup : {~A : Type, s : S/Semigroup(A), e:A
//              , identity : Identity(A,S/get.f(s),e)
//              } -> Monoid(A)
//  @ s ~> Monoid(A)
//  | mkSemigroup => mkMonoid<A>(f,e,associative,identity)
