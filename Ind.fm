import Equal

// The inductive hypothesis on nats. Erases to Church.
Ind : Type
  ${self}
  {~P     : {r : Ind} -> Type} ->
  {step   : ! {~r : -Ind, i : P(+r)} -> P(step(+r))} ->
  ! {base : P(base)} ->
    P(self)

step : {r : Ind} -> Ind
  new(~Ind){~P, step}
  dup step = step
  dup func = (use(r))(~{x} P(x), #step)
  # {base}
    step(~%r, func(base))

base : Ind
  new(~Ind){~P, step}
  dup step = step
  # {base}
    base

// Induction on `Ind` is just identity.
ind :
  {n     : Ind
  , ~P   : {n : Ind} -> Type
  , step : ! {~n : -Ind, i : P(+n)} -> P(step(+n))
  , stop : ! P(base)
  } -> ! P(n)
  dup step = step
  dup stop = stop
  dup loop = (use(n))(~{x} P(x), #step)
  # loop(stop)

// Induction without indices is just recursion.
rec : {r : Ind, ~T : Type, step : !{x : T} -> T, base : !T} -> !T
  dup step = step
  dup base = base
  dup loop = (use(r))(~{r} => T, #{~n} => step)
  # loop(base)

// Doubles the number of steps of an `ind`.
twice : {n : Ind} -> Ind
  new(~Ind) {~P, STEP}
  dup STEP = STEP
  let moti = {n} P(twice(n))
  let STEP = {~n, i} => STEP(~%step(twice(+n)), STEP(~%twice(+n), i))
  dup loop = (use(n))(~moti, #STEP)
  # {base} loop(base)

// Adds two Inds.
plus : {a : Ind, b : Ind} -> Ind
  new(~Ind) {~P, s}
  dup S = s
  dup A = (use(a))(~{a} => P(plus(a, b)), #{~n, h} => S(~%plus(+n, b), h))
  dup B = (use(b))(~{b} => P(plus(base, b)), #{~n, h} => S(~%plus(base, +n), h))
  # {z} => A(B(z))

T UnstepPos
| unstep_head
| unstep_tail

// Fusible predecessor of an Ind
unstep : {n : Ind} -> Ind
  new(~Ind) {~P, S}
  dup S = S
  let motive = {n} {b : UnstepPos} ->
    (use(b))(~{b}Type, P(unstep(n)), P(unstep(step(n))))
  let case_s = {~n, h, b}
    case/UnstepPos b
    + h(unstep_tail) as x : P(unstep(step(+n)))
    | unstep_head => x
    | unstep_tail => S(~%(unstep(step(+n))), x)
    : case/UnstepPos b
      | unstep_head => P(unstep(step(+n)))
      | unstep_tail => P(step(unstep(step(+n))))
      : Type
  dup F = (use(n))(~motive, #case_s)
  # {Z}
  let case_z = {b}
    case/UnstepPos b
    + Z : P(base)
    | unstep_head => Z
    | unstep_tail => Z
    : case/UnstepPos b
      | unstep_head => P(unstep(base))
      | unstep_tail => P(unstep(step(base)))
      : Type
  F(case_z, unstep_head)

// ::::::::::::::
// :: Theorems ::
// ::::::::::::::

unstep_step_is_id : {i : Ind} -> ! Equal(Ind, %unstep(step(i)), %i)
  let motive = {i} Equal(Ind, %unstep(step(i)), %i)
  let case_s = # {~n, h} cong(~Ind, ~Ind, ~%unstep(step(+n)), ~n, ~%step, h)
  dup F = (use(i))(~motive, case_s)
  # F(refl(~Ind, ~%base))

#cong_unstep : {a : Ind, b : Ind, e : !Equal(Ind, %step(a), %step(b))} -> !Equal(Ind, %a, %b)
  // unstep(step(a)) == a
  let ae = $unstep_step_is_id(a)
  // unstep(step(b)) == b
  let be = $unstep_step_is_id(b)
  // unstep(step(a)) == unstep(step(b))
  let e0 = cong(~Ind, ~Ind, ~%step(a), ~%step(b), ~%unstep, e)
  // a == unstep(step(b))
  let e1 = rewrite(~Ind, ~%unstep(step(a)), ~%a, ae, ~{x} Equal(Ind, %x, %unstep(step(b))), e0)
  // a == b
  let e2 = rewrite(~Ind, ~%unstep(step(b)), ~%b, be, ~{x} Equal(Ind, %a, %x), e1)
  e2
