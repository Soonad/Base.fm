// ### Word

// `Word`s are unsigned integers of 32 bits:
word.example_0 : Word
  1900

// They can also be written in hexadecimal:
word.example_1 : Word
  0x76C

// And in binary:
word.example_2 : Word
  0b11101101100

// They include many built-in operations:
// 
// name                 | syntax    | JS equivalent
// -------------------- | --------- | ------------------
// addition             | `x + y`   | `(x + y) >>> 0`
// subtraction          | `x - y`   | `(x - y) >>> 0`
// multiplication       | `x * y`   | `(x * y) >>> 0`
// division             | `x / y`   | `(x / y) >>> 0`
// modulus              | `x % y`   | `(x % y) >>> 0`
// exponentiation       | `x ^ y`   | `(x ** y) >>> 0`
// bitwise-and          | `x .& y`  | `x & y`
// bitwise-or           | `x .| y`  | `x | y`
// bitwise-xor          | `x .^ y`  | `x ^ y`
// bitwise-not          | `.!(y)`   | `~y`
// bitwise-right-shift  | `x .>> y` | `x >>> y`
// bitwise-left-shift   | `x .<< y` | `x << y`
// greater-than         | `x .> y`  | `x > y ? 1 : 0`
// less-than            | `x .< y`  | `x < y ? 1 : 0`
// equals               | `x .= y`  | `x === y ? 1 : 0`
// float-addition       | `x +f y`  | `x + y`
// float-subtraction    | `x -f y`  | `x - y`
// float-multiplication | `x *f y`  | `x * y`
// float-division       | `x /f y`  | `x / y`
// float-modulus        | `x %f y`  | `x % y`
// float-exponentiation | `x ^f y`  | `x ** y`
// uint-to-float        | `.f(y)`   | -
// float-to-uint        | `.u(y)`   | -

word.example_3 : Word
  42 + 10

word.example_4 : Word
  100 * 3

// There is no operator precedence: parenthesis are always placed on the right.
// That means `3 * 10 + 1` is parsed as `3 * (10 + 1)`. If you want the
// multiplication to occur first, you must be explicit:
word.example_5 : Word
  (3 * 10) + 1
