import Array
import JSON
import Nat
import Unit

// Doc is a renderable document
T Doc
| text(value : String)
| numb(value : Number)
| many(value : List(Doc))

// App is an interactive application
T App<A>
| app(
  state  : A,
  render : (state : A) -> Doc,
  update : (event : JSON, state : A) -> A
)

get_state(~A, app : App(A)) : A
  case app
  | app => app.state
  : A

get_render(~A, app : App(A)) : A -> Doc
  case app
  | app => app.render
  : A -> Doc

get_update(~A, app : App(A)) : JSON -> A -> A
  case app
  | app => app.update
  : JSON -> A -> A

// Converts a Formality Doc to a JSON
doc_to_json(doc : Doc) : JSON
  case doc
  | text =>
    json_object(<[:String, JSON]>[
      ["type", json_string("text")],
      ["value", json_string(doc.value)]
    ])
  | numb =>
    json_object(<[:String, JSON]>[
      ["type", json_string("numb")],
      ["value", json_number(doc.value)]
    ])
  | many => 
    json_object(<[:String, JSON]>[
      ["type", json_string("many")],
      ["value", json_list(many_to_json(doc.value))]
    ])
  : JSON

many_to_json(list : List(Doc)) : List(JSON)
  case list
  | nil  => nil(~JSON)
  | cons => cons(~JSON, doc_to_json(list.head), many_to_json(list.tail))
  : List(JSON)
