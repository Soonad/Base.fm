import Equal
import Fin
import Nat
import Unit

// A vector is a list with a statically known length
T Vector<A> (len : -Nat)
| vnil                                                : Vector(A, zero)
| vcons(~len : -Nat, head : A, tail : Vector(A, len)) : Vector(A, succ(len))

// Returns the first element of a non-empty vector
vhead(~A, ~len : -Nat, xs : Vector(A, succ(len))) : A
  case xs
  + refl(~Nat, ~succ(len)) as e : Equal(Nat, xs.len, succ(len))
  | vnil  => absurd(zero_isnt_succ(~len, e), ~A)
  | vcons => xs.head
  : A

// Returns all but the first element of a non-empty vector
vtail(~A, ~len : -Nat, xs : Vector(A, succ(len))) : Vector(A, len)
  case xs
  + refl(~Nat, ~succ(len)) as e : Equal(Nat, xs.len, succ(len))
  | vnil  => absurd(zero_isnt_succ(~len, e), ~Vector(A, zero))
  | vcons => xs.tail
  : Vector(A, pred(xs.len))

// Returns a pair with the head and the tail of a non-empty vector
vtake(~A, ~len : -Nat, xs : Vector(A, succ(len))) : [:A, Vector(A, len)]
  case xs
  + refl(~Nat, ~succ(len)) as e : Equal(Nat, xs.len, succ(len))
  | vnil  => absurd(zero_isnt_succ(~len, e), ~[:A, Vector(A, zero)])
  | vcons => [xs.head, xs.tail]
  : [:A, Vector(A, pred(xs.len))]

// Returns the same vector
vsame(~A, ~len : -Nat, xs : Vector(A, len)) : Vector(A, len)
  case xs
  | vnil  => vnil(~A)
  | vcons => vcons(~A, ~xs.len, xs.head, vsame(~A, ~xs.len, xs.tail))
  : Vector(A, xs.len)

// Allocates a Vec with given length
valloc(len : Nat) : Vector(Unit, len)
  case len
  | zero => vnil(~Unit)
  | succ => vcons(~Unit, ~len.pred, unit, valloc(len.pred))
  : Vector(Unit, len)

// TODO: range, map, concat, zip, etc.
