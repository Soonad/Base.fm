// Vector.fm defines a static-length vector type
//

import Equal as E
import Fin
import Nat
import Unit

// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// ::                    Definition                       ::
// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::

// A vector is a list with a statically known length
T Vector<A> (len : -Nat)
| nil : Vector(A, zero)
| cons(
    ~len : -Nat,
    head : A,
    tail : Vector(A, len)
  ) : Vector(A, succ(len))

// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// ::                    Operations                       ::
// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::

// Returns the first element of a non-empty vector
head(~A, ~len : -Nat, xs : Vector(A, succ(len))) : A
  case xs
  + refl(~Nat, ~succ(len))
    as e : Equal(Nat, xs.len, succ(len))
  | nil  => absurd(zero_isnt_succ(~len, e), ~A)
  | cons => xs.head
  : A

// Returns all but the first element of a non-empty vector
tail(~A, ~len : -Nat, xs : Vector(A, succ(len)))
: Vector(A, len)
  case xs
  + refl(~Nat, ~succ(len))
    as e : Equal(Nat, xs.len, succ(len))
  | nil  =>
      absurd(
        zero_isnt_succ(~len, e),
        ~Vector(A, zero)
      )
  | cons => xs.tail
  : Vector(A, pred(xs.len))

// Returns a pair with the head and the tail of a non-empty vector
take(~A, ~len : -Nat, xs : Vector(A, succ(len)))
: [:A, Vector(A, len)]
  case xs
  + refl(~Nat, ~succ(len))
    as e : Equal(Nat, xs.len, succ(len))
  | nil  =>
      absurd(
        zero_isnt_succ(~len, e),
        ~[:A, Vector(A, zero)]
      )
  | cons => [xs.head, xs.tail]
  : [:A, Vector(A, pred(xs.len))]

// Returns the same vector, unfusible identity
id_uf(~A, ~len : -Nat, xs : Vector(A, len))
: Vector(A, len)
  case xs
  | nil  => nil(~A)
  | cons =>
    cons(~A, ~xs.len, xs.head, id_uf(~A, ~xs.len, xs.tail))
  : Vector(A, xs.len)

// Allocates a Vec with given length
alloc(len : Nat) : Vector(Unit, len)
  case len
  | zero => nil(~Unit)
  | succ => cons(~Unit, ~len.pred, unit, alloc(len.pred))
  : Vector(Unit, len)

// TODO: range, map, concat, zip, etc.
