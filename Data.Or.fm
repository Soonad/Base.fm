// A value (proof) of type `Or(A,B)` contains *either*:
// - a value (proof) of the first type, `A`, *or*...
// - a value (proof) of the second type, `B`
T Or {A : Type, B: Type}
| left  { value : A }
| right { value : B }

Or.commutation : {~A : Type, ~B : Type , case c : Or(A,B) } -> Or(B,A)
| left  => right(~B,~A, c.value)
| right => left(~B,~A, c.value)

