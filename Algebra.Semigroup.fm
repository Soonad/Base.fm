import Algebra.Magma
import Algebra.Operation
import Data.Function

// A Semigroup is an associative Magma
T Semigroup {A : Type, s : Setoid(A)}
| semigroup
  { f           : Op2(A)
  , associative : Associative(A,s,f)
  }

magma_to_semigroup :
  {~A           : Type
  ,~s           : Setoid(A)
  , case m           : Magma(A,s)
  , associative : Associative(A,s, case/Magma m | magma => m.f : Op2(A))
  } -> Semigroup(A,s)
| magma => semigroup(~A,~s,m.f, associative)

// All Semigroups are Magmas
semigroup_to_magma :
  {~A : Type
  ,~s : Setoid(A)
  , case sem : Semigroup(A,s)
  } -> Magma(A,s)
| semigroup => magma(~A,~s,sem.f)

// A RegularSemigroup is one which has a regular inversion for every element
T RegularSemigroup {A : Type, s : Setoid(A)}
| regular_semigroup
  { f           : Op2(A)
  , associative : Associative(A,s,f)
  , inversion   :
      case/Setoid s | setoid =>
        {x : A} -> [y : A, s.R(y, f(y,f(x,y)))]
      : Type
  }

// An InverseSemigroup is one which has a unique inversion for every element
T InverseSemigroup {A : Type, s : Setoid(A)}
| inverse_semigroup
  { f : Op2(A)
  , associative : Associative(A,s,f)
  , inversion : 
      case/Setoid s | setoid => 
        {x : A} -> [y : A, :s.R(x, f(x,f(y,x))), s.R(y, f(y,f(x,y)))]
      : Type
  }


T AbelianSemigroup {A : Type, s : Setoid(A)}
| abelian_semigroup
  { f           : Op2(A)
  , e           : A
  , associative : Associative(A,s,f)
  , commutative : Commutative(A,s,f)
  }

T IdempotentSemigroup {A : Type, s : Setoid(A)}
| idempotent_semigroup
  { f           : Op2(A)
  , e           : A
  , associative : Associative(A,s,f)
  , idempotent  : Idempotent(A,s,f)
  }

//semigroup.endo : {~A : Type} -> Semigroup(A -> A,feq(~A,~A))
//  let f = compose(~A,~A,~A)
//  let associative = {x,y,z,a} refl(~x(y(z(a))))
//  semigroup(~(A -> A),~feq(~A,~A),f,associative)

