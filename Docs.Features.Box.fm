// Formality includes primives for performing explicit, deep copies of terms,
// as long as they’re “boxed”.

// syntax       | description
// ------------ | ------------------------
// #t           | Puts term t inside a box
// !T           | The type of a boxed term
// dup x = t; u | Unboxes t and copies it as x inside u

// Creating a boxed Word:
box.example_0 : !Word
  # 42

// Duplicating a boxed word:
box.example_1 : !Word
  dup x = # 42
  # x + x + x

// Using the argument of a function more than once:
box.example_2 : {f : !(Word -> Word)} -> !Word
  dup g = f
  # g(10) + g(20)

// ## The Stratification Condition

// Boxes are limited by a global restriction called "stratification". It
// maintains the following invariant:

// >> The level of a term can never change during the program evaluation.

// To understand it, you must be able to count the level of a term. The level
// of a term is defined by the amount of `#` surrounding it. So, for example:

box.example_3 : [:Word, :!Word, :Word, :![:Word, !Word], !!Word]
  [100, #200, 300, #[400, #500], ##600]

// - The word 100 isn’t wrapped by any box. It is on level 0.
// - The word 200 is wrapped by one box. It is on level 1.
// - The word 300 isn’t wrapped by any box. It is on level 0.
// - The word 400 is wrapped by one box. It is on level 1.
// - The word 500 is wrapped by two boxes (one indirect). It is on level 2.
// - The word 600 is wrapped by two boxes. It is on level 2.

// That condition is enforced globally, forbidding certain programs. For example:

// This is not allowed because it increases the level of `x`:
// box.example_4 : {x : Word} -> !Word 
//   # x

// This is not allowed because it decreases the level of `x`:
// box.example_5 : [:Word, Word]
//  dup x = #42
//  [x, x]

// This is allowed:
box.example_6 : ![:Word, Word]
  dup x = # 42
  # [x, x]

// This is allowed:
box.example_7 : [:!Word, !Word]
  dup x = # 42
  [#x, #x]
