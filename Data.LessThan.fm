import Data.Nat open
import Data.Unit open
import Induction.Nat open

// a < b
T Less (a : Nat, b : Nat)
| less_succ {~a : Nat, ~b : Nat, l : Less(a, b)} (succ(a), succ(b))  // ∀a b. a < b -> a+1 < b+1
| less_zero {~b : Nat}                           (zero   , succ(b))  // ∀b  . 0 < b+1

// `2 < 4`
less.example : Less(0n2, 0n4)
  less_succ(~0n1, ~0n3,
  less_succ(~0n0, ~0n2,
  less_zero(~0n1)))

// ∀ n . n < n+1
!less_than_succ*N : !{case n : Nat} -> Less(n, succ(n))
| succ => less_succ(~n.pred, ~succ(n.pred), less_than_succ(n.pred))
| zero => less_zero(~zero)
* ?

main less_than_succ_2
