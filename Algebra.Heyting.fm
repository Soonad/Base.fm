import Algebra.Magma

T Heyting {A : Type, s : Setoid(A)}
| heyting
  { meet                 : Op2(A)
  , join                 : Op2(A)
  , implies              : Op2(A)
  , e0                   : A
  , e1                   : A
  , meet.commutative     : Commutative(A,s,meet)
  , meet.associative     : Associative(A,s,meet)
  , meet.identity        : Identity(A,s,meet,e1)
  , join.commutative     : Commutative(A,s,join)
  , join.associative     : Associative(A,s,join)
  , join.identity        : Identity(A,s,join,e0)
  , absorption           : Absorption(A,s,meet,join)
  , distributive         : Distributive(A,s,meet,join)
  , implies.identity     : Identity(A,s,implies,e1)
  , meet.antecedent      :
      case/Setoid s
      | setoid => {x : A, y : A} -> s.R(meet(x,implies(x,y)), meet(x,y)) 
      : Type
  , meet.consequent      :
      case/Setoid s
      | setoid => {x : A, y : A} -> s.R(meet(y,implies(x,y)),y)
      : Type
  , implies.distributive : Distributive(A,s,implies,meet)
  }
