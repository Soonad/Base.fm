import BinaryOperation open
import Magma as M

T Semigroup<A : Type>
| mkSemigroup { f : A -> A -> A, associative : Associative(A,f)}

toMagma : {~A : Type, m : Semigroup(A)} -> M/Magma(A)
  case<Semigroup> m | mkSemigroup => M/mkMagma<A>(f) : M/Magma(A)

T InverseSemigroup<A : Type>
| mkInverseSemigroup 
  { f : A -> A -> A
  , inverseSemigroup1 : Associative(A,f)
  , inverseSemigroup2 : {x : A} -> [y : A,[:x == f(x,f(y,x)),y == f(y,f(x,y))]]
  }

