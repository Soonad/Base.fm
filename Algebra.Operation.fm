import Relation.Binary

Op1 : {A : Type} -> Type
  A -> A

Op2 : {A : Type} -> Type
  A -> A -> A

Op3 : {A : Type} -> Type
  A -> A -> A -> A

// Properties of binary operations
// ===============================
Associative : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  case/Setoid s | setoid =>
    {x : A, y : A, z : A} -> s.R(f(f(x,y),z), f(x,f(y,z)))
  : Type

// Error
//dual.associative :
//  { ~A : Type
//  , case s : Setoid(A)
//  , ~f : Op2(A)
//  , a : Associative(A,s,f)
//  } -> Associative(A,s,{x,y} f(y,x))
//| setoid => case/Equivalence s.equivalence as se
//  | equivalence => {x,y,z} se.symmetric(~(f(f(z,y),x)),~(f(z,f(y,x))),a(z,y,x))
//  : Associative(A,s,{x,y} f(y,x))

dual.associative :
  { ~A : Type
  , case ~s : Setoid(A)
  , ~f : Op2(A)
  , a : Associative(A,s,f)
  } -> Associative(A,s,{x,y} f(y,x))
| setoid => case/Equivalence s.equivalence as se
  | equivalence => {x,y,z} se.symmetric(~(f(f(z,y),x)),~(f(z,f(y,x))),~a(z,y,x))
  : {x : A, y : A, z : A} -> s.R(f(z,f(y,x)), f(f(z,y),x))


PowerAssociative : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  case/Setoid s | setoid =>
    {x : A} -> s.R(f(f(x,x),x), f(x,f(x,x)))
  : Type

LeftAlternative : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  case/Setoid s | setoid =>
    {x : A, y : A} -> s.R(f(f(x,x),y), f(x,f(x,y)))
  : Type

RightAlternative : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  case/Setoid s | setoid =>
  {x : A, y : A} -> s.R(f(y,f(x,x)), f(f(y,x),x))
    : Type

Alternative : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
   And(LeftAlternative(A,s,f), RightAlternative(A,s,f))

Flexible : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  case/Setoid s | setoid =>
    {x : A, y : A} -> s.R(f(f(x,y),x), f(x,f(y,x))) 
  : Type


Commutative : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  case/Setoid s | setoid =>
    {x : A, y : A} -> s.R(f(x,y), f(y,x))
  : Type

Medial : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  case/Setoid s | setoid =>
    {x : A, y : A, u : A, z : A} -> s.R(f(f(x,y), f(u,z)), f(f(x,u),f(y,z)))
  : Type

LeftSemimedial : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  case/Setoid s | setoid =>
    {x : A, y : A, z : A} -> s.R(f(f(x,x), f(y,z)), f(f(x,y),f(x,z)))
  : Type

RightSemimedial : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  case/Setoid s | setoid =>
    {x : A, y : A, z : A} -> s.R(f(f(x,x), f(y,z)), f(f(x,y),f(x,z)))
  : Type

Semimedial : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  And(LeftSemimedial(A,s,f),RightSemimedial(A,s,f))

Idempotent : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  case/Setoid s | setoid =>
    {x : A} -> s.R(f(x,x), x) 
  : Type

Unipotent : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  case/Setoid s | setoid =>
    {x : A, y : A} -> s.R(f(x,x), f(y,y))
  : Type

Zeropotent : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  case/Setoid s | setoid =>
    {x : A, y : A} -> [:s.R(f(f(x,x),y),f(x,x)), s.R(f(y,f(x,x)),f(x,x))]
  : Type

Null : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  case/Setoid s | setoid =>
    {x : A, y : A, u : A, v : A} -> [:s.R(f(x,y),x), s.R(f(u,v),v)]
  : Type

LeftCancellative : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  case/Setoid s | setoid => 
    {x : A, y : A, z : A, :s.R(f(x,y),f(x,z))} -> s.R(y,z)
  : Type

RightCancellative : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  case/Setoid s | setoid => 
    {x : A, y : A, z : A, :s.R(f(y,x),f(z,x))} -> s.R(y,z)
  : Type

Cancellative : {A : Type, s : Setoid(A), f : Op2(A)} -> Type;
  And(LeftCancellative(A,s,f),RightCancellative(A,s,f))

LatinSquare : {A : Type, s : Setoid(A), f : Op2(A)} -> Type
  case/Setoid s | setoid => 
    {a : A, b : A} -> [x : A, y : A, :s.R(f(a,x),b), s.R(f(y,a),b)]
  : Type


// Properties of elements in relation to binary operations
//=======================================================

LeftZero : {A : Type, s : Setoid(A), f : Op2(A), e : A} -> Type
  case/Setoid s | setoid =>
  {y : A} -> s.R(f(y,e), e)
  : Type

RightZero : {A : Type, s : Setoid(A), f : Op2(A), e : A} -> Type
  case/Setoid s | setoid =>
    {y : A} -> s.R(f(e,y), e)
  : Type

Zero : {A : Type, s : Setoid(A), f : Op2(A), e : A} -> Type
  And(LeftZero(A,s,f,e),RightZero(A,s,f,e))

LeftIdentity : {A : Type, s : Setoid(A), f : Op2(A), e : A} -> Type
  case/Setoid s | setoid =>
   {y : A} -> s.R(f(y,e), y)
  : Type

RightIdentity : {A : Type, s : Setoid(A), f : Op2(A), e : A} -> Type
  case/Setoid s | setoid =>
    {y : A} -> s.R(f(e,y), y)
  : Type

Identity : {A : Type, s : Setoid(A), f : Op2(A), e : A} -> Type
  And(LeftIdentity(A,s,f,e), RightIdentity(A,s,f,e))

LeftInverse :
  { A : Type
  , s : Setoid(A)
  , f : Op2(A)
  , e : A
  , p : Identity(A,s,f,e)
  } -> Type
  case/Setoid s | setoid =>
    {y : A} -> [x : A, s.R(f(x,y),e)]
  : Type

RightInverse : 
  { A : Type
  , s : Setoid(A)
  , f : Op2(A)
  , e : A
  , p : Identity(A,s,f,e)
  } -> Type
  case/Setoid s | setoid =>
    {y : A} -> [x : A, s.R(f(y,x),e)]
  : Type

Inverse :
  { A : Type
  , s : Setoid(A)
  , f : Op2(A)
  , e : A
  , p : Identity(A,s,f,e)
  } -> Type
  And(LeftInverse(A,s,f,e,p),RightInverse(A,s,f,e,p))

// Properties of 2 binary operations
// =================================

LeftDistributive : {A : Type, s : Setoid(A), f : Op2(A), g : Op2(A)} -> Type
  case/Setoid s | setoid =>
    {x : A, y : A, z : A} -> s.R(f(x, g(y,z)), g(f(x,y),f(x,z)))
  : Type

RightDistributive : {A : Type, s : Setoid(A), f : Op2(A), g : Op2(A)} -> Type
  case/Setoid s | setoid =>
    {x : A, y : A, z : A} -> s.R(f(g(y,z),x), g(f(y,x),f(z,x)))
  : Type

Distributive : {A : Type, s : Setoid(A), f : Op2(A), g : Op2(A)} -> Type
  And(LeftDistributive(A,s,f,g), RightDistributive(A,s,f,g))

Absorption : {A : Type, s : Setoid(A), f : Op2(A), g : Op2(A)} -> Type
  case/Setoid s | setoid =>
    {x : A, y : A} -> [:s.R(g(x, f(x, y)),x), s.R(f(x, g(x,y)),x)]
  : Type
