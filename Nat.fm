// Nat.fm
// ======
// 
// Natural numbers.

import Bool
import Empty
import Equal
import Pair
import The
import Unit

// Definition
// ----------

T Nat
| zero
| succ(pred: Nat)

T Comparison
| less_than
| equal_to
| greater_than

// Functions
// ---------

// Predecessor
pred(n: Nat) : Nat
  case n
  | zero => zero
  | succ => n.pred

// Copies a Nat
copy_nat(n: Nat) : #{Nat, Nat}
  case n
  | zero => #[zero, zero]
  | succ => case copy_nat(n.pred) as pred
    | pair => #[succ(pred.fst), succ(pred.snd)]

clone_nat(n: Nat) : #{Same(Nat,n),Same(Nat,n)}
  case n
  | zero => #[sigma(__ zero, equal(__)),sigma(__ zero, equal(__))]
  | succ =>
      get #[n1,n2] = clone_nat(n.pred)
      get #[n1v,n1e] = n1
      get #[n2v,n2e] = n2
      let e1 = apply(_____ n1e)
      let e2 = apply(_____ n2e)
      #[sigma(__ succ(n1v), e1), sigma(__ succ(n2v), e2)]
  : Pair(Same(Nat,n), Same(Nat,n))

// Addition
add(n: Nat, m: Nat) : Nat
  case n
  + m : Nat
  | zero => m
  | succ => case m
    + n.pred : Nat
    | zero => succ(n.pred)
    | succ => succ(succ(add(n.pred, m.pred)))

// Subtraction
sub(n: Nat, m: Nat) : Nat
  case m
  + n : Nat
  | zero => n
  | succ => case n
    | zero => zero
    | succ => sub(n.pred, m.pred)

// Multiplication by 2
double(n: Nat) : Nat
  case n
  | zero => zero
  | succ => succ(succ(double(n.pred)))

// Helper for the multiplication below
mul.go(k: Nat, n: Nat, m: Nat) : Nat
  let f = mul.go
  case k
  + n: Nat
  + m: Nat
  + f: Nat -> Nat -> Nat -> Nat
  | zero => case m
    | zero => zero
    | succ => f(n, zero, m.pred)
  | succ => succ(f(k.pred, succ(n), m))

// Multiplication
mul(n: Nat, m: Nat) : Nat
  mul.go(zero, n, m)

// Comparison
nat_compare(n: Nat, m: Nat) : Comparison
  case n
  + m: Nat
  | zero => case m
    | zero => equal_to
    | succ => less_than
  | succ => case m
    | zero => greater_than
    | succ => nat_compare(n.pred, m.pred)

// Equality
nat_equal(n: Nat, m: Nat) : Bool
  case nat_compare(n, m) as cmp
  | less_than    => false
  | equal_to     => true
  | greater_than => false

// Theorems
// --------

// Proof that `1 != 0`
succ_isnt_zero(n : Nat;) : succ(n) != zero
  let P = (n: Nat) =>
    case n
    | zero => Empty
    | succ => Unit
  (e) => unit :: rewrite P(.) with e

// Proof that `0 != 1`
zero_isnt_succ(n: Nat;): zero != succ(n)
  let P = (n: Nat) =>
    case n
    | zero => Unit
    | succ => Empty
  (e) => unit :: rewrite P(.) with e

// Proof that `n == m` implies `succ(n) == succ(m)`
apply_succ(n: Nat; m; e: n == m) : succ(n) == succ(m)
  apply(_____ e)

// Proof that `succ(n) == succ(m)` implies `n == m`
apply_pred(n: Nat; m; e: succ(n) == succ(m)) : n == m
  apply(____ pred; e)

// Tests
// -----

nat.test0: The(Nat, 6n)
  the(_ add(3n, 3n))

nat.test1: The(Nat, 6n)
  the(_ mul(2n, 3n))
