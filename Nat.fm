import Ind open
import Bool open

T Nat
| succ {pred : Nat}
| zero

pred : {n : Nat} -> Nat
  @ n    ~> Nat
  | succ => pred
  | zero => zero

pred.example
  pred(succ(succ(zero)))

!add*N : !{n : Nat, *m : Nat} -> Nat
  (@ n   ~> Nat -> Nat
  | succ => {m} succ(add(pred, m))
  | zero => {m} m)(m)

!double*N : !{*n : Nat} -> Nat
  @ n    ~> Nat
  | succ => succ(succ(double(pred)))
  | zero => zero

// Non-recursive functions that use recursive functions must also be boxed.
// They must unbox the recursive functions they use.
!double.example : !Nat
  double*256(succ(zero))

// Converts a native Word to a Nat
!from_word*N : !{x : Word} -> Nat
  if x === 0:
    zero
  else:
    succ(from_word(x - 1))
  * zero

// Converts a Nat to a native Word
!to_word*N : !{n : Nat} -> Word
  @ n    ~> Word
  | succ => 1 + to_word(pred)
  | zero => 0
  * 0

// Converts a Ind to a Nat
from_ind : {r : Ind} -> !Nat
  dup func = (%r)(~{r}Nat, #{~r}succ)
  # func(zero)
