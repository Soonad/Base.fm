// Nat.fm
// ======
// 
// Natural numbers.

import Bool
import Empty
import Equal
import The
import Unit

// Definition
// ----------

T Nat
| zero
| succ(pred: Nat)

// Functions
// ---------

// Predecessor
pred(n: Nat) : Nat
  case n
  | zero => zero
  | succ => n.pred

// Copies a Nat
copy_nat(n: Nat) : Pair(Nat, Nat)
  case n
  | zero => pair(__ zero, zero)
  | succ => case copy_nat(n.pred) as pred
    | pair => pair(__ succ(pred.fst), succ(pred.snd))

// Copies a Nat with proof
clone_nat(n: Nat) : Pair(Same(Nat, n), Same(Nat,n))
  case n
  | zero => pair(__ sigma(__ zero, equal(__)),sigma(__ zero, equal(__)))
  | succ =>
    case clone_nat(n.pred) as ns | pair =>
    case ns.fst as ns1 | sigma =>
    case ns.snd as ns2 | sigma =>
    let e1 = apply(_____ ns1.snd)
    let s1 = sigma(__ succ(ns1.fst), e1)
    let e2 = apply(_____ ns2.snd)
    let s2 = sigma(__ succ(ns2.fst), e2)
    pair(__ s1, s2)
    : Pair(Same(Nat,succ(n.pred)), Same(Nat,succ(n.pred)))
    : Pair(Same(Nat,succ(n.pred)), Same(Nat,succ(n.pred)))
    : Pair(Same(Nat,succ(n.pred)), Same(Nat,succ(n.pred)))
  : Pair(Same(Nat,n), Same(Nat,n))

// Addition
add(n: Nat, m: Nat) : Nat
  case n
  + m : Nat
  | zero => m
  | succ => case m
    + n.pred : Nat
    | zero => succ(n.pred)
    | succ => succ(succ(add(n.pred, m.pred)))

// Subtraction
sub(n: Nat, m: Nat) : Nat
  case m
  + n : Nat
  | zero => n
  | succ => case n
    | zero => zero
    | succ => sub(n.pred, m.pred)

// Multiplication by 2
double(n: Nat) : Nat
  case n
  | zero => zero
  | succ => succ(succ(double(n.pred)))

// Helper for the multiplication below
mul.go(k: Nat, n: Nat, m: Nat) : Nat
  let f = mul.go
  case k
  + n: Nat
  + m: Nat
  + f: Nat -> Nat -> Nat -> Nat
  | zero => case m
    | zero => zero
    | succ => f(n, zero, m.pred)
  | succ => succ(f(k.pred, succ(n), m))

// Multiplication
mul(n: Nat, m: Nat) : Nat
  mul.go(zero, n, m)

// Equality test
nat_equal(n: Nat, m: Nat) : Bool
  case n
  + m: Nat
  | zero => case m
    | zero => true
    | succ => false
  | succ => case m
    | zero => false
    | succ => nat_equal(n.pred, m.pred)

// Theorems
// --------

// Proof that `1 != 0`
succ_isnt_zero(n : -Nat;) : succ(+n) != zero
  let P = (n: -Nat) =>
    case +n as n
    | zero => Empty
    | succ => Unit
  (e) => unit :: rewrite P(.) with e

// Proof that `0 != 1`
zero_isnt_succ(n: -Nat;): zero != succ(+n)
  let P = (n: -Nat) =>
    case +n as n
    | zero => Unit
    | succ => Empty
  (e) => unit :: rewrite P(.) with e

// Proof that `n == m` implies `succ(n) == succ(m)`
apply_succ(n: -Nat; m; e: n == m) : succ(+n) == succ(+m)
  apply(_____ e)

// Tests
// -----

nat.test0: The(Nat, 6n)
  the(_ add(3n, 3n))

nat.test1: The(Nat, 6n)
  the(_ mul(2n, 3n))
