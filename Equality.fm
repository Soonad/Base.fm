// The equality type is built-in
Eq : {~A : Type, ~a : A, ~b : A} -> Type
  a == b

// Symmetry is built-in
symmetry : {~A : Type, ~a : A, ~b : A, ~e : a == b} -> b == a
  sym<e>

// Substitution is built-in
subst : {~A : Type, ~a : A, ~b : A, ~e : a == b, ~P : A -> Type, x : P(a)} -> P(b)
  rewrite<e>{x in P(x)}(x)

// Congruence (`a == b` implies `f(a) == f(b)`)
cong : {~A : Type, ~B : Type, ~a : A, ~b : A, ~f : A -> B, ~e : a == b} -> f(a) == f(b)
  rewrite<e>{x in f(a) == f(x)}(refl<f(a)>)

// Non-builtin propositional equality
T EQ <A : Type, a : A> {b : A}
| REFL : EQ(A, a, a)

// Converts eq to EQ
eq_to_EQ : {A : Type, a : A, b : A, e : a == b} -> EQ(A, a, b)
  rewrite<e>{X in $self {~P : {b : A, wit : EQ(A, a, b)} -> Type, REFL : P(a, REFL<A, a>)} -> P(X, self)}(REFL<A, a>)
