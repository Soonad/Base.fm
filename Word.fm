// Word.fm defines a bitstream with static length

import Nat
import Equal
import Bits
import The

T Word (len : -Nat)
| we                                : Word(zero)
| w0(~len : -Nat, pred : Word(len)) : Word(succ(len))
| w1(~len : -Nat, pred : Word(len)) : Word(succ(len))

word_to_bits(n : -Nat, w : Word(n)) : Bits
  case w
  | we => be
  | w0 => b0(word_to_bits(w.len,w.pred))
  | w1 => b1(word_to_bits(w.len,w.pred))
  : Bits

bits_to_word(l : Nat, b : Bits) : Word(l)
  get [x, y] = clone_nat(l)
  get [n, ne] = x
  get [m, me] = y
  case n
  + ne : Equal(Nat,n,l)
  + m  : Nat
  + me : Equal(Nat,m,l)
  | zero => rewrite(~Nat,~%zero,~%l,ne, ~(x) => Word(x), we)
  | succ =>
    let bs = case b
      + m : Nat
      | be => w0(~pred(m),bits_to_word(pred(m), be))
      | b0 => w0(~pred(m),bits_to_word(pred(m),b.pred))
      | b1 => w1(~pred(m),bits_to_word(pred(m),b.pred))
      : Word(succ(pred(m)))
    get [ne1,ne2] = same(~Nat,~succ(n.pred),~%l,ne)
    let ln = sym(~Nat,~%succ(n.pred),~%l,ne1)
    let mn = trans(~Nat,~%m,~%l,~%succ(n.pred),me,ln)
    let mn = cong(~Nat,~Nat,~%m,~%succ(n.pred),~pred,mn)
    let P = (x) => Word(succ(x))
    let bs = rewrite(~Nat,~%pred(m),~%n.pred,mn,~P, bs)
    let P = (x) => Word(x)
    let bs = rewrite(~Nat,~%succ(n.pred),~%l,ne2,~P, bs)
    bs
  : Word(l)

Word8 : Type; Word(8n)

w_15 : Word(4n)
  w1(~3n,w1(~2n,w1(~1n,w1(~0n,we))))

word.test : The(Number,15)
  let x = bits_to_word(5n,word_to_bits(4n, w_15))
  let x = bits_to_nat(word_to_bits(5n,x))
  the(~Number,nat_to_number(x))

word.not(n : -Nat, x : Word(n)) : Word(n)
  case x
  + refl(~Nat, ~n) as e : Equal(Nat,x.len,n)
  | we => rewrite(~Nat, ~%zero,~%n, e,~(x) => Word(x),we)
  | w0 => let w = w1(~x.len,word.not(x.len,x.pred))
      rewrite(~Nat, ~%succ(x.len),~%n, e,~(x) => Word(x),w)
  | w1 => let w = w0(~x.len,word.not(x.len,x.pred))
      rewrite(~Nat, ~%succ(x.len),~%n, e,~(x) => Word(x),w)
  : Word(n)

word.and(n : -Nat, x : Word(n), y : Word(n)) : Word(n)
  case x
  + y : Word(n)
  + refl(~Nat, ~n) as ex : Equal(Nat,x.len,n)
  | we => rewrite(~Nat,~%zero,~%n,ex,~(x) => Word(x),we)
  | w0 =>
    case y
    + ex : Equal(Nat,succ(x.len),n)
    + refl(~Nat, ~n) as ey : Equal(Nat,y.len,n)
    | we => rewrite(~Nat,~%zero,~%n,ey,~(x) => Word(x),we)
    | w0 =>
      get [x1, x2] = same(~Nat,~%succ(x.len),~%n,ex)
      let xy = trans2(~Nat,~%succ(y.len),~%n,~%succ(x.len),ey,x1)
      let xy = cong_pred(~%y.len, ~%x.len, xy)
      let P = (x) => Word(x)
      let yp = rewrite(~Nat,~%y.len,~%x.len,xy,~P,y.pred)
      let w = w0(~x.len,word.and(x.len,x.pred,yp))
      rewrite(~Nat,~%succ(x.len),~%n,x2,~P,w)
    | w1 =>
      get [x1, x2] = same(~Nat,~%succ(x.len),~%n,ex)
      let xy = trans2(~Nat,~%succ(y.len),~%n,~%succ(x.len),ey,x1)
      let xy = cong_pred(~%y.len, ~%x.len, xy)
      let P = (x) => Word(x)
      let yp = rewrite(~Nat,~%y.len,~%x.len,xy,~P,y.pred)
      let w = w0(~x.len,word.and(x.len,x.pred,yp))
      rewrite(~Nat,~%succ(x.len),~%n,x2,~P,w)
    : Word(n)
  | w1 =>
    case y
    + ex : Equal(Nat,succ(x.len),n)
    + refl(~Nat, ~n) as ey : Equal(Nat,y.len,n)
    | we => rewrite(~Nat,~%zero,~%n,ey,~(x) => Word(x),we)
    | w0 =>
      get [x1, x2] = same(~Nat,~%succ(x.len),~%n,ex)
      let xy = trans2(~Nat,~%succ(y.len),~%n,~%succ(x.len),ey,x1)
      let xy = cong_pred(~%y.len, ~%x.len, xy)
      let P = (x) => Word(x)
      let yp = rewrite(~Nat,~%y.len,~%x.len,xy,~P,y.pred)
      let w = w0(~x.len,word.and(x.len,x.pred,yp))
      rewrite(~Nat,~%succ(x.len),~%n,x2,~P,w)
    | w1 =>
      get [x1, x2] = same(~Nat,~%succ(x.len),~%n,ex)
      let xy = trans2(~Nat,~%succ(y.len),~%n,~%succ(x.len),ey,x1)
      let xy = cong_pred(~%y.len, ~%x.len, xy)
      let P = (x) => Word(x)
      let yp = rewrite(~Nat,~%y.len,~%x.len,xy,~P,y.pred)
      let w = w1(~x.len,word.and(x.len,x.pred,yp))
      rewrite(~Nat,~%succ(x.len),~%n,x2,~P,w)
    : Word(n)
  : Word(n)

word.and2(n : Nat, x : Word(n), y : Word(n)) : Word(n)
  let x = word_to_bits(n,x)
  let y = word_to_bits(n,y)
  bits_to_word(n,bits.and(x,y))

word.inc(n : -Nat, x : Word(n)) : [:Word(n), Bool]
  let P = (x) => Word(x)
  case x
  + refl(~Nat, ~n) as e : Equal(Nat,x.len,n)
  | we => [rewrite(~Nat,~%zero,~%n,e,~P,we), true]
  | w0 =>
      let w = w1(~x.len,x.pred)
      [rewrite(~Nat,~%succ(x.len),~%n,e,~P,w), false]
  | w1 =>
      get [w, b] = word.inc(x.len,x.pred)
      let w = w0(~x.len,w)
      [rewrite(~Nat,~%succ(x.len),~%n,e,~P,w), b]
  : [:Word(n), Bool]
