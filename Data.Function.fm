// The identity function
id : {~A : Type, x:A} -> A
  x

// The constant function always returns the same value
const : {~A : Type, ~B : Type, x : A, y : B} -> A
  x

// Function composition
compose : {~A : Type, ~B : Type, ~C : Type, g : B -> C, f : A -> B, x : A} -> C
  g(f(x))

// Flip the term arguments
flip : {~A : Type, ~B : Type, ~C : Type, f : A -> B -> C, y : B, x : A} -> C
  f(x,y)

apply : {~A : Type, ~B : Type, f : A -> B, x : A} -> B
  f(x)

pipe : {~A : Type, ~B : Type, x : A, f : A -> B} -> B
  f(x)

// Creates a boxed version of a function (from `A -> A` to `!A -> !A`)
boxed : {~A : Type, f : !{x : A} -> A, x : !A} -> !A
  dup f = f
  dup x = x
  # f(x)

// Function wrapper
Fun : {A : Type, B :T ype} -> Type
  A -> B
