PBT : Type
  $ self
  {~P   : {r : PBT} -> Type} ->
  {node : ! {~r : PBT, L : P(r), R : P(r)} -> P(node(r))} ->
  {leaf : ! P(leaf)} ->
  ! P(self)

node : {r : PBT} -> PBT
  new<PBT>{~P, node, leaf}
  dup leaf = leaf
  dup node = node
  dup func = (%r)(~P, #node, #leaf)
  # node(~r, func, func)

leaf : PBT
  new<PBT>{~P, node, leaf}
  dup leaf = leaf
  dup node = node
  # leaf

PBT.0
  new<PBT>{~P, node, leaf}
  dup node = node
  dup leaf = leaf
  # leaf

PBT.1
  new<PBT>{~P, node, leaf}
  dup node = node
  dup leaf = leaf
  dup T = # node(~PBT.0, leaf, leaf)
  # T

PBT.2
  new<PBT>{~P, node, leaf}
  dup node = node
  dup leaf = leaf
  dup T = # node(~PBT.0, leaf, leaf)
  dup T = # node(~PBT.1, T, T)
  # T

PBT.3
  new<PBT>{~P, node, leaf}
  dup node = node
  dup leaf = leaf
  dup T = # node(~PBT.0, leaf, leaf)
  dup T = # node(~PBT.1, T, T)
  dup T = # node(~PBT.2, T, T)
  # T

PBT.4
  new<PBT>{~P, node, leaf}
  dup node = node
  dup leaf = leaf
  dup T = # node(~PBT.0, leaf, leaf)
  dup T = # node(~PBT.1, T, T)
  dup T = # node(~PBT.2, T, T)
  dup T = # node(~PBT.3, T, T)
  # T

PBT.5
  new<PBT>{~P, node, leaf}
  dup node = node
  dup leaf = leaf
  dup T = # node(~PBT.0, leaf, leaf)
  dup T = # node(~PBT.1, T, T)
  dup T = # node(~PBT.2, T, T)
  dup T = # node(~PBT.3, T, T)
  dup T = # node(~PBT.4, T, T)
  # T

PBT.6
  new<PBT>{~P, node, leaf}
  dup node = node
  dup leaf = leaf
  dup T = # node(~PBT.0, leaf, leaf)
  dup T = # node(~PBT.1, T, T)
  dup T = # node(~PBT.2, T, T)
  dup T = # node(~PBT.3, T, T)
  dup T = # node(~PBT.4, T, T)
  dup T = # node(~PBT.5, T, T)
  # T