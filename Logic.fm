import Data.Empty open
import Data.Or open
import Data.And open

// If and only if
Iff : {A : Type, B : Type} -> Type
  And(A -> B, B -> A)

// Modus ponens
affirms : {A : Type, B : Type, implies : A -> B, a : A} -> B
  implies(a)

// Modus tollens
denies : {A : Type, B : Type, implies : A -> B, nb : Not(B)} -> Not(A)
  {x} nb(implies(x))

// Disjunctive syllogism (modus tollendo ponens)
or_syllogism : {~A : Type, ~B : Type, case or_AB : Or(A,B), neg_A : Not(A)} -> B
| left  => absurd(neg_A(or_AB.value), B)
| right => or_AB.value

// Hypothetical syllogism
logical_chain_rule : {~A : Type, ~B : Type, ~C : Type, f : A -> B, g : B -> C, x : A} -> C
  g(f(x))
