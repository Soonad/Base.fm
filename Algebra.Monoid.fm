import Algebra.Magma
import Algebra.Semigroup
import Data.Function

T Monoid {A : Type}
| monoid
  { f           : A -> A -> A
  , e           : A
  , associative : Associative(A,f)
  , identity    : Identity(A,f,e)
  }

// Monoids are Semigroups
monoid_to_semigroup : {~A : Type, case m : Monoid(A)} -> Semigroup(A)
| monoid => semigroup(~A, m.f, m.associative)

T AbelianMonoid {A : Type}
| abelian_monoid
  { f           : A -> A -> A
  , e           : A
  , associative : Associative(A,f)
  , identity    : Identity(A,f,e)
  , commutative : Commutative(A,f)
  }

T IdempotentMonoid {A : Type}
| idempotent_monoid
  { f           : A -> A -> A
  , e           : A
  , associative : Associative(A,f)
  , identity    : Identity(A,f,e)
  , idempotent  : Idempotent(A,f)
  }

// Dual monoid
monoid.dual : {~A : Type, case m : Monoid(A)} -> Monoid(A)
| monoid =>
  let g = {x,y} m.f(y,x)
  let left_id = LeftIdentity(A,m.f,m.e)
  let right_id = RightIdentity(A,m.f,m.e)
  let identity = And.commutation(~left_id, ~right_id, m.identity)
  monoid(~A,g,m.e,{x,y,z} sym(~m.associative(z,y,x)), identity)


