import Algebra.Operation
import Algebra.Semigroup
import Data.Function
import Logic

T Monoid {A : Type, s : Setoid(A)}
| monoid
  { f           : Op2(A)
  , e           : A
  , associative : Associative(A,s,f)
  , identity    : Identity(A,s,f,e)
  }

semigroup_to_monoid :
  {~A : Type
  ,~s : Setoid(A)
  , case sem : Semigroup(A,s)
  , ~e : A
  , identity : case/Semigroup sem | semigroup => Identity(A,s,sem.f,e) : Type
  } -> Monoid(A,s)
| semigroup => monoid(~A,~s,sem.f,e,sem.associative,identity)

// Monoids are Semigroups
monoid_to_semigroup :
  {~A : Type
  ,~s : Setoid(A)
  , case m : Monoid(A,s)
  } -> Semigroup(A,s)
| monoid => semigroup(~A,~s,m.f, m.associative)

T AbelianMonoid {A : Type, s : Setoid(A)}
| abelian_monoid
  { f           : Op2(A)
  , e           : A
  , associative : Associative(A,s,f)
  , identity    : Identity(A,s,f,e)
  , commutative : Commutative(A,s,f)
  }

T IdempotentMonoid {A : Type, s : Setoid(A)}
| idempotent_monoid
  { f           : A -> A -> A
  , e           : A
  , associative : Associative(A,s,f)
  , identity    : Identity(A,s,f,e)
  , idempotent  : Idempotent(A,s,f)
  }

