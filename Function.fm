import Equal

// The identity function
id(~A, x : A) : A
  x

// The constant function always returns the same value
const(~A : Type, ~B : Type, x : A, y : B) : A
  x

// dependent composition
compose(~A, ~B, ~C : B -> Type, g : (b : B) -> C(b), f : A -> B, x : A) : C(f(x))
  g(f(x))

// uncurry 2-ary function
uncurry2(~A, ~B, ~C, f : A -> B -> C, p : [:A, B]) : C
  get [a, b] = p
  f(a,b)

// Flip the term arguments
flip(~A, ~B, ~C, f : A -> B -> C, y : B, x : A) : C
  f(x,y)

// Applies a function to an argument
apply(~A, ~B, f : A -> B, x : A) : B
  f(x)

// Pipes an argument to a function
pipe(~A, ~B, x : A, f : A -> B) : B
  f(x)
