import Equal
import Nat

// The inductive hypothesis on perfect binary trees. Erases to Church.
Ind2 : Type
  ${self}
  { ~P    : {a : Ind2} -> Type
  , step2 : ! {~k : -Ind2, a : P(+k), b : P(+k)} -> P(step2(+k))
  , base2 : ! P(base2)
  } -> ! P(self)

step2 : {k : Ind2} -> Ind2
  new(~Ind2){~P, step2, base2}
  dup step2 = step2
  dup base2 = base2
  dup kfold = (use(k))(~{x} &P(x), #step2, #base2)
  # step2(~%k, kfold, kfold)

base2 : Ind2
  new(~Ind2){~P, step2, base2}
  dup step2 = step2
  dup base2 = base2
  # base2

ind2_depth : {i2 : Ind2} -> !Nat
  (use(i2))(~{x} Nat, #{~i,a,b} succ(a), #zero)

t0  : Ind2; base2
t1  : Ind2; step2(t0)
t2  : Ind2; step2(t1)
t3  : Ind2; step2(t2)
t4  : Ind2; step2(t3)
t5  : Ind2; step2(t4)
t6  : Ind2; step2(t5)
t7  : Ind2; step2(t6)
t8  : Ind2; step2(t7)
t9  : Ind2; step2(t8)
t10 : Ind2; step2(t9)
t11 : Ind2; step2(t10)
t12 : Ind2; step2(t11)
t13 : Ind2; step2(t12)
t14 : Ind2; step2(t13)
t15 : Ind2; step2(t14)
t16 : Ind2; step2(t15)
t17 : Ind2; step2(t16)
t18 : Ind2; step2(t17)
t19 : Ind2; step2(t18)
t20 : Ind2; step2(t19)
t21 : Ind2; step2(t20)
t22 : Ind2; step2(t21)
t23 : Ind2; step2(t22)
t24 : Ind2; step2(t23)
t25 : Ind2; step2(t24)
t26 : Ind2; step2(t25)
t27 : Ind2; step2(t26)
t28 : Ind2; step2(t27)
t29 : Ind2; step2(t28)
t30 : Ind2; step2(t29)
t31 : Ind2; step2(t30)
t32 : Ind2; step2(t31)
