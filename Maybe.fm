/* Maybe.fm defines an optional value type
 */

import Bool

// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// ::                     Definition                      ::
// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::

T Maybe<A>
| none
| some(value : A)


// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// ::                     Operations                      ::
// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::

maybe(~A, ~B, b : B, f : A -> B, ma : Maybe(A)) : B
  case ma
  | none => b
  | some => f(ma.value)
  : B

is_some(~A, ma : Maybe(A)) : Bool
  case ma
  | none => false
  | some => true
  : Bool

is_none(~A, ma : Maybe(A)) : Bool
  case ma
  | none => true
  | some => false
  : Bool

from_Maybe(~A, x : A, ma : Maybe(A)) : A
  maybe(~A, ~A, x, (x) => x, ma)

Maybe.map(~A, ~B, f : A -> B, ma : Maybe(A)) : Maybe(B)
  case ma
  | none => none(~B)
  | some => some(~B,f(ma.value))
  : Maybe(B)

Maybe.ap(~A, ~B, mf : Maybe(A -> B), ma : Maybe(A)) : Maybe(B)
  case mf
  | none => none(~B)
  | some => Maybe.map(~A,~B, mf.value, ma)
  : Maybe(B)

Maybe.pure(~A): A -> Maybe(A)
  some(~A)

Maybe.bind(~A, ~B, f : A -> Maybe(B), ma : Maybe(A)) : Maybe(B)
  case ma
  | none => none(~B)
  | some => f(ma.value)
  : Maybe(B)





