import Bits
import Maybe
import Nat
import List

// A Map from Bits to values
T Map{A}
| empty
| multi(val: Maybe(A), lft: Map(A), rgt: Map(A))

singleton_map(A; x: A) : Map(A)
  multi(A; some(_ x), empty(_), empty(_))

// Gets a value
lookup(A; bits: Bits, map: Map(A)) : Maybe(A)
  case bits
  with map    : Map(A)
  with lookup : (A; bits: Bits, map: Map(A)) -> Maybe(A)
  | be => case map
    | empty => none(_)
    | multi => map.val
  | b0 => case map
    | empty => none(_)
    | multi => lookup(_ bits.pred, map.lft)
  | b1 => case map
    | empty => none(_)
    | multi => lookup(_ bits.pred, map.rgt)

// Sets a value
insert(A; bits: Bits, val: A, map: Map(A)) : Map(A)
  case bits
  with val: A
  with map: Map(A)
  with insert: (A: Type;) -> Bits -> A -> Map(A) -> Map(A)
  | be => case map
    with some(A; val) as val : Maybe(A)
    | empty => multi(_ val, empty(_), empty(_))
    | multi => multi(_ val, map.lft, map.rgt)
  | b0 => case map
    with insert(A; bits.pred, val) as insert : Map(A) -> Map(A)
    | empty => multi(_ none(_), insert(empty(_)), empty(_))
    | multi => multi(_ map.val, insert(map.lft), map.rgt)
  | b1 => case map
    with insert(A; bits.pred, val) as insert : Map(A) -> Map(A)
    | empty => multi(_ none(_), empty(_), insert(empty(_)))
    | multi => multi(_ map.val, map.lft, insert(map.rgt))

list_to_map(A; xs : List(Pair(Bits, A))) : Map(A)
  case xs
  | nil  => empty(_)
  | cons => case xs.head as kv
    | pair => insert(_
      kv.fst,
      kv.snd,
      list_to_map(_ xs.tail))

map_elements(A; map : Map(A)) : List(A)
  case map
  | empty => nil(_)
  | multi => 
    let lft = map_elements(_ map.lft) 
    let rgt = map_elements(_ map.rgt)
    let all = concat(_ lft, rgt)
    case map.val as val
    with all : List(A)
    | none => all
    | some => cons(_ val.value, all)

// Updates a value, return a function of it and the map
query(A; qry: A -> Pair(A,A), bits: Bits, map: Map(A))
: Pair(Map(A), Maybe(A))
  let rec = query(A;)
  case bits
  with map : Map(A)
  with rec : (qry : A -> Pair(A,A), bits : Bits, map : Map(A))
    -> Pair(Map(A), Maybe(A))
  with qry : A -> Pair(A, A)
  | be => case map
    | empty =>
      pair(__ empty(_), none(_))
    | multi =>
      case map.val as mval
      with map.lft : Map(A)
      with map.rgt : Map(A)
      | none => 
        let map = multi(_ none(_), map.lft, map.rgt)
        let val = none(_)
        pair(__ map, val)
      | some => case qry(mval.value) as v
        | pair => 
          let map = multi(_ some(_ v.fst), map.lft, map.rgt)
          let val = some(_ v.snd)
          pair(__ map, val)
      : Pair(Map(A), Maybe(A))
    : Pair(Map(A), Maybe(A))
  | b0 => case map
    | empty => pair(__ empty(_), none(_))
    | multi => case rec(qry, bits.pred, map.lft) as p
      | pair =>
        let map = multi(_ map.val, p.fst, map.rgt)
        pair(__ map, p.snd)
    : Pair(Map(A), Maybe(A))
  | b1 => case map
    | empty => pair(__ empty(_), none(_))
    | multi => case rec(qry, bits.pred, map.rgt) as p
      | pair =>
        let map = multi(_ map.val, map.lft, p.fst)
        pair(__ map, p.snd)
    : Pair(Map(A), Maybe(A))

// Theorems
// --------

// Getting a stored value returns it
LookupInsert(A, bits: Bits, val: A, map: Map(A)) : Type
  let lft = some(_ val)
  let rgt = lookup(_ bits, insert(_ bits, val, map))
  Equal(Maybe(A), lft, rgt)

// Proof
lookup_insert(A; bits : Bits, val : A, map : Map(A))
: LookupInsert(A, bits, val, map)
  case bits
  with map : Map(A)
  with val : A
  | be =>
    case map
    with val : A
    | empty => equal(_ some(A; val);)
    | multi => equal(_ some(A; val);)
    : LookupInsert(A, be, val, map)
  | b0 =>
    let rec = lookup_insert(A; bits.pred, val)
    case map
    with rec : (map : Map(A))
      -> LookupInsert(A, bits.pred, val, map)
    | empty => rec(empty(_))
    | multi => rec(map.lft)
    : LookupInsert(A, b0(bits.pred), val, map)
  | b1 =>
    let rec = lookup_insert(A; bits.pred, val)
    case map
    with rec : (map : Map(A))
      -> LookupInsert(A, bits.pred, val, map)
    | empty => rec(empty(_))
    | multi => rec(map.rgt)
    : LookupInsert(A, b1(bits.pred), val, map)
  : LookupInsert(A, bits, val, map)

// Examples
// --------

map_example0 : Maybe(Bits)
  let map = empty(_)
  let map = insert(_ 1111111101101110b, 100b, map)
  lookup(_ 1111111101101110b, map)

map_example1 : Pair(Maybe(Bits), Maybe(Bits))
  let qry     = (a) => copy_bits(a)
  let map     = empty(_)
  let map     = insert(_ 10100100b, 101b, map)
  let map     = insert(_ 01100010b, 111b, map)
  let map     = insert(_ 10111001b, 010b, map)
  case query(Bits; qry, 10100100b, map) as q0
  | pair => case query(Bits; qry, 01100010b, q0.fst) as q1
    | pair => pair(__ q0.snd, q1.snd)
