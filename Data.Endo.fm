import Data.Function
import Algebra.Operation
import Algebra.Semigroup
import Algebra.Monoid

// An Endomorphism is a function from A to A
Endo : {A : Type} -> Type
  A -> A

//endo.associative : {A : Type} -> Associative(Endo(A),feq(A,A),compose(~A,~A,~A))
  //{x,y,z,a} refl(~(x(y(z(a)))))

//endo.identity :
  //{A : Type
  //} -> Identity(Endo(A), feq(A,A), compose(~A,~A,~A), id(~A))
  //let L = LeftIdentity(Endo(A), feq(A,A), compose(~A,~A,~A), id(~A))
  //let R = RightIdentity(Endo(A), feq(A,A), compose(~A,~A,~A), id(~A))
  //both(~L, ~R, {y,a} refl(~y(a)), {y,a} refl(~y(a)))

//// semigroup of endomorphisms
//endo.semigroup : {~A : Type} -> Semigroup(Endo(A),feq(A,A))
  //let A = type(A)
  //semigroup(~Endo(A),~feq(A,A),compose(~A,~A,~A),endo.associative(A))

//endo.monoid : {~A : Type} -> Monoid(Endo(A), feq(A,A))
  //let A = type(A)
  //let f = compose(~A,~A,~A)
  //let e = id(~A)
  //monoid(~Endo(A),~feq(A,A),f,e,endo.associative(A),endo.identity(A))
