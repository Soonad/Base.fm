import Data.Nat
import Data.Empty

T Fin (lim : Nat)
| fsucc {~lim : Nat, pred : Fin(lim)} (succ(lim))
| fzero {~lim : Nat}                  (succ(lim))

#fin_to_nat*N : !{~lim : Nat, fin : Fin(lim)} -> Nat
  case/Fin fin
  | fsucc => succ(fin_to_nat(~fin.lim, fin.pred))
  | fzero => zero
  : Nat
halt: zero

#nat_to_fin*N : !{case n : Nat} -> Fin(succ(n))
| succ => fsucc(~succ(n.pred), nat_to_fin(n.pred))
| zero => fzero(~zero)
halt: fzero(~n)

#fin_inc*N : !{~lim : Nat, fin : Fin(lim)} -> Fin(succ(lim))
  case/Fin fin
  | fsucc => fsucc(~succ(fin.lim), fin_inc(~fin.lim, fin.pred))
  | fzero => fzero(~succ(fin.lim))
  : Fin(succ(fin.lim))
halt: fzero(~lim)

no_fin_zero : {fin : Fin(zero)} -> Empty
  case/Fin fin
  note e : fin.lim is zero
  | fsucc => succ_isnt_zero(~fin.lim, ~e)
  | fzero => succ_isnt_zero(~fin.lim, ~e)
  : Empty

#fin_raise*N : !{~n : Nat, f : Fin(n)} -> Fin(<add*N>(<nat(N)>, n))
  fsucc(~<add(N)>(<nat(N)>, n), fin_raise(~n, f))
halt: f

#fin_inject*N : !{~lim : Nat, fin : Fin(<nat(N)>)} -> Fin(<add*N>(<nat(N)>, lim))
  case/Fin fin
  note e : fin.lim is <nat(step(N))>
  | fsucc =>
    let e = cong_pred(fin.lim, <nat(N)>, e)
    let p = fin.pred :: rewrite x in Fin(x) with e
    fsucc(~<add(N)>(<nat(N)>, lim), fin_inject(~lim, p))
  | fzero =>
    fzero(~<add(N)>(<nat(N)>, lim))
  : Fin(<add(step(N))>(<nat(step(N))>, lim))
halt: absurd(no_fin_zero(fin), ~Fin(lim))
