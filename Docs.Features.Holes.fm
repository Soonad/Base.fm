import Base

// ### Holes

// Formality also features ``hole`s`, which are very useful for development and
// debugging. A `hole` can be used to fill a part of your program that you don’t
// want to implement yet. It can be written anywhere as ?name, with the name
// being optional. This will cause Formality to print the type expected on the
// `hole` location, as well as its context (scope variables). For example, try
// program below:

// `hole`s.example_0 : {x : Bool} -> Bool
//   and(true, ?)

// It will output and error that tells you that, on the location of the `hole`,
// you should have a Bool.

// The point of `hole`s is that Formality will assume them to be true, allowing
// you to move on to other parts of your program before returning. Note that
// this is only automatic if Formality can infer the expected type of the
// `hole`’s location. Otherwise, you must give it an explicit annotation, as in
// `?hole :: MyType`.
