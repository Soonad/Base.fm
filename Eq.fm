T Eq <A : Type, a : A> {b : A}
| refl : Eq(A, a, a)

sym : {~A : Type, ~a : A, ~b : A, e : Eq(A, a, b)} -> Eq(A, b, a)
  case<Eq> e
  | refl => refl<A>(~a)
  : Eq(A, b, a)
  
cong : {~A : Type, ~B : Type, ~a : A, ~b : A, ~f : {a : A} -> B, e : Eq(A, a, b)} -> Eq(B, f(a), f(b))
  case<Eq> e
  | refl => refl<B>(~f(a))
  : Eq(B, f(a), f(b))

rewrite : {~A : Type, ~a : A, ~b : A, ~P : {a : A} -> Type, e : Eq(A, a, b), x : P(a)} -> P(b)
  case<Eq> e
  | refl => x
  : P(b)

main
  rewrite
