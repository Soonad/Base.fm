/* Equal.fm defines the propositional equality type
 *
 * A value (proof) of type `Equal(A,a,b)` contains the
 * reflexive constructor that `a` equals itself, which
 * implies `b` is equal to `a` iff `b` reduces to `a`
 */


// ========================================================
// =                    Definition                        =
// ========================================================

T Equal<A, a : -A> (b : -A)
| refl : Equal(A, a, a)

// ========================================================
// =                Utilities/Theorems                    =
// ========================================================

// Substitution: if a equals b, you can replace a with b
rewrite(
    ~A
  , ~a : -A
  , ~b : -A
  , e : Equal(A, a, b)
  , ~P : A -> Type
  , x : P(a)
  ) : P(b)
  case e
  | refl => x
  : P(e.b)

// Symmetry: if a equals b, b equals a
sym(~A, ~a : -A, ~b : -A, e : Equal(A, a, b)) : Equal(A, b, a)
  case e
  | refl => refl(~A, ~a)
  : Equal(A, e.b, a)

// Congruence: if a equals b, f(a) equals f(b)
cong(
    ~A
  , ~B
  , ~a : -A
  , ~b : -A
  , ~f : -(A -> B)
  , e : Equal(A, a, b)
  ) : Equal(B, (+f)(a), (+f)(b))
  case e
  | refl => refl(~B, ~(+f)(a))
  : Equal(B, (+f)(a), (+f)(e.b))

// Transitivity: if a equals b and b equals c, a equals c
trans(
    ~A
  , ~a : -A
  , ~b : -A
  , ~c : -A
  , ab : Equal(A, a, b)
  , bc : Equal(A, b, c)
  ) : Equal(A, a, c)
  case bc
  | refl => ab
  : Equal(A, a, bc.b)
