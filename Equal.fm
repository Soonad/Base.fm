// Equal.fm
// ========
//
// The propositional equality type. A value (proof) of type
// `Equal(A,a,b)` contains the reflexive constructor that
// `a` equals itself, which implies `b` is equal to `a` iff
// `b` reduces to `a`.
// 
// == is sugar for Equal(A, a, b)

// Definition
// ----------

T Equal<A, a : A> (b : A)
| equal : Equal(A, a, a)

// Functions
// ---------

// Substitution: if a equals b, you can replace a with b
rewrite(A; a; b; e: a == b, P: A -> Type; x: P(a)) : P(b)
  case e
  | equal => x
  : P(e.b)

// Symmetry: if a equals b, b equals a
mirror(A; a; b; e: a == b) : b == a
  case e
  | equal => equal(__)
  : Equal(A, e.b, a)

// Congruence: if a equals b, f(a) equals f(b)
apply(A; B; a; b; f: A -> B; e: a == b) : f(a) == f(b)
  case e
  | equal => equal(__)
  : Equal(B, f(a), f(e.b))

// Transitivity: if a equals b and b equals c, a equals c
chain(A; a; b; c; ab: a == b, bc: b == c) : a == c
  case bc
  | equal => ab
  : Equal(A, a, bc.b)
