// Empty.fm
// ========
// 
// The type with no elements. Since `Empty` is by
// definition uninhabited, we can treat a hypothetical
// element `e : Empty` as a logical contradiction or
// falsehood.

// Definition
// ----------

T Empty

// Operations
// ----------

// From falsehood, anything follows. This function allows us
// to prove any theorem if we have `e : Empty` in context.
absurd(e: Empty, P: Type;) : P
  case e : P

// A false proposition returns a falsehood.
Not(P) : Type
  (x : P) -> Empty
