// This file was ported from the old Formality-Core.
// TODO: add types, move Cat to its own file, update comments

// Let's define tup_rotate_N as the function that receives an N-tuple, and returns
// another tuple with the last element on the first position, and the remaining
// elements afterwards. I.e., `tup_rotate_4 == {tup T} (tup {a b c d} (T d a b
// c))`. To derive `tup_rotate_N` for any `N`, we would need a `next` function that
// transforms a tup_rotate `N` into a tup_rotate `N+1`. That is, given:
// 
//   let tup_rotate_4 = {tup T} (tup {a b c d} (T d a b c))
//   let tup_rotate_5 = {tup T} (tup {a b c d e} (T e a b c d))
// 
// Then it should follow that `(next tup_rotate_4) == tup_rotate_5`. This can't be
// implemented directly, but we can place EDIT points to help us:
// 
//   let editable_4 = {EDIT0} (EDIT0 {EDIT1 a b c d} (EDIT1 {T} (T d a b c)))
// 
// An editable is, as the name says, a tup_rotator that can be edited in two
// positions, being more flexible to work with. Notice that `editable_N` can
// easily be converted into `tup_rotate_N`:
// 
//   let tup_rotate_N = (editable_N {P0} {tup T} (tup (P0 {t} (t T))))
// 
// Moreover, it can be transformed in an editable `N+1` with: 
// 
//   let editable_tup_rotator_SN = {EDIT0} (EDIT0 (editable_tup_rotator_N {P0} {EDIT1 x} (P0 {P1} (EDIT1 {T} (P1 {k} (T x k))))))
//
// And it can be transformed into an editable `N-1` with:
//
//   let editable_P0 = {EDIT0} (EDIT0 (editable_N {P0} {EDIT1} (P0 {P1} (EDIT1 {T} (P1 {k a} (T k))) {x}x)))
// 
// With this, we can derive `tup_rotate_N` for any `N`.
// 
// `tup_rotate` is interesting because it fuses with itself, i.e., it's normal form
// doesn't increase when applied repeatedly. For example, `(~5 tup_rotate_4)` is
// not only equal to `tup_rotate_4` (since rotating a 4-tuple 5 times is the same
// as rotating it once), but they have the same normal form, `{a b} (a {c d e
// f} (b f c d e))`. This effect is used to implement fast modular exponentiation.
Tup.rotate_right {n}
  let editable_one  = {EDIT0} EDIT0({EDIT1, k} EDIT1({T} T(k)))
  let editable_succ = {ed} {EDIT0} EDIT0(ed({P0, EDIT1, x} P0({P1} EDIT1({T} P1({k} T(k, x))))))
  let editable_pred = {ed} {EDIT0} EDIT0(ed({P0, EDIT1} P0({P1} EDIT1({T} P1({k, a} T(k))), {x}x)))
  let to_tup_rotate = {ed} ed({P0, tup, T} tup(P0({t} t(T))))
  dup fold = n(#editable_succ)
  # to_tup_rotate(editable_pred(fold(editable_one)))

// Teturns a tuple with all numbers from N-1 to 0:
Tup.rev_range {n}
  dup fold = n(#{state}
    get [index, tuple] = state
    cpy index          = index
    [index + 1, {T} tuple(T(index))])
  # snd(fold([0, {T} T]))

// Given a `tuple_N`, returns its first element.
Tup.last {n}
  let editable_one  = {EDIT} EDIT({x}x)
  let editable_succ = {ed, edit} ed({get_last} edit({x} get_last))
  let editable_pred = {ed, edit} ed({get_last} edit(get_last({x} x)))
  let to_tup_last   = {ed, T} T(ed({x}x))
  dup fold = n(#editable_succ)
  # to_tup_last(editable_pred(fold(editable_one)))

Tup.new {a, b}
  {tup} tup(a, b)

Tup.fst {tup}
  tup({a, b} a)

Tup.snd {tup}
  tup({a, b}b)

Tup.pushfront {a, tup} {t} tup(t(a))
Tup.pushback {a, tup} {t} tup(t, a)
Tup.popfront {tup} {t} tup({x} t)

Tup.empty {t} t

Tup.concat {tup1, tup2} {t}
  tup2(tup1(t))

Cat : Type
  {~P : Type, csucc : ! P -> P} -> ! {czero : P} -> P

step : {r : Cat} -> Cat
  {~P, csucc}
  dup csucc = csucc
  dup cfunc = r(~P, #csucc)
  # {czero} csucc(cfunc(czero))

base : Cat
  {~P, csucc}
  dup csucc = csucc
  # {czero} czero

twice : {n : Cat} -> Cat
  {~P, csucc}
  dup csucc = csucc
  n(~P, #{i} csucc(csucc(i)))

cexp {a, x}
  x(a)

// Computes `a^x mod n` (fast modular exponentiation with optimal reductions).
// Cat.exp_mod
// : {a : !Cat, x : Cat, N : !Cat} -> ! Cat
exp_mod {a, x, N}

  // Computes a^x
  dup ax = x(a)

  // Creates copies of N
  dup N = N

  # // Creates an N-tuple with numbers from N-1 down to 0
    dup numbers = Tup.rev_range(N) 

    // Creates a function to get the last element of an N-tuple
    dup get_last = Tup.last(N)

    // Creates a function that rotates an N-tuple rightwise `ax` times
    dup rotate_ax_times = ax(Tup.rotate_right(N))

    // Rotates the numbers and returns the last element, i.e., `a^x mod N`
    # get_last(rotate_ax_times(numbers))

main
  let a = *123
  let x = *1000
  let N = *137
  exp_mod(#a, x, #N)
