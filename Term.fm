import Maybe
import Nat
import String

T Term
| var(indx : Nat)
| lam(body : Term)
| app(func : Term, argm : Term)

T HOAS
| hvar(indx : Nat)
| hlam(body : HOAS -> HOAS)
| happ(func : HOAS, argm : HOAS)

// Stringify

show_nat.go(n : Nat) : String -> String
  case n
  | zero => (x) => cons(_ 'z', x)
  | succ => (x) => cons(_ 's', show_nat.go(n.pred, x))
  : String -> String

show_nat(n : Nat) : String
  show_nat.go(n, nil(_))

show_term.go(term : Term, dep : Nat) : String -> String
  case term
  + dep : Nat
  | var =>
    show_nat.go(term.indx)
  | lam =>
    get [dep.fst, dep.snd] = copy_nat(dep)
    let lamb = cons(_ 'Î»')
    let body = show_term.go(term.body, succ(dep.snd))
    (x) => lamb(body(x))
  | app => 
    get [dep.fst, dep.snd] = copy_nat(dep)
    let lpar = cons(_ '(')
    let func = show_term.go(term.func, dep.fst)
    let spac = cons(_ ' ')
    let argm = show_term.go(term.argm, dep.snd)
    let rpar = cons(_ ')')
    (x) => lpar(func(spac(argm(rpar(x)))))
  : String -> String

show_term(term : Term) : String
  show_term.go(term, zero, nil(_))

// Reduction

reduce.go(hoas : HOAS) : HOAS
  case hoas
  | hvar => hvar(hoas.indx)
  | hlam => hlam(hoas.body)
  | happ => case reduce.go(hoas.func) as fn
    + reduce.go : HOAS -> HOAS
    + hoas.argm : HOAS
    | hvar => happ(hvar(fn.indx), reduce.go(hoas.argm))
    | hlam => reduce.go(fn.body(hoas.argm))
    | happ => happ(happ(fn.func, fn.argm), reduce.go(hoas.argm))

reduce.quote(hoas : HOAS, dep : Nat) : -Term
  % case reduce.go(hoas) as hoas
  | hvar => var(sub(dep, succ(hoas.indx)))
  | hlam => lam(reduce.quote(hoas.body(hvar(dep)), succ(dep)))
  | happ => app(reduce.quote(hoas.func, dep), reduce.quote(hoas.argm, dep))

reduce.unquote(term : Term, ctx : List(HOAS)) : -HOAS
  case term
  | var => case at(_ term.indx, ctx) as got
    | none => hvar(term.indx)
    | some => got.value
  | lam => hlam((x) => reduce.unquote(term.body, cons(_ x, ctx)))
  | app => happ(reduce.unquote(term.func, ctx), reduce.unquote(term.argm, ctx))

reduce(term : Term) : -Term
  reduce.quote(reduce.unquote(term, nil(_)), zero)

main reduce

//t_succ : Term
  //lam((n) => lam((s) => lam((z) => app(s, n))))

//t_zero : Term
  //lam((s) => lam((z) => z))

//t_n3 : Term
  //app(t_succ, app(t_succ, app(t_succ, t_zero)))

//t_double : Term
  //lam((n)=>
    //let case_succ = lam((pred) => app(t_succ, app(t_succ, app(t_double, pred))))
    //let case_zero = t_zero
    //app(app(n, case_succ), case_zero))

//t_two : Term
  //lam((s) => lam((z) => app(s, app(s, z))))

//term.test %print(show(quote(app(t_two, t_two))))

////main term.test
