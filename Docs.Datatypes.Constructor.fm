import Base@0

// Construtor with Fields
// ----------------------

// Datatype constructors can have fields, allowing them to store values:

T Person
| person {age : Word, name : String}

constructor.example_0 : {p : Person} -> String
  case/Person p
  | person => p.name
  : String

constructor.example_0_test : Output
  let john = person(26, "John")

  print(constructor.example_0(john))

// As you can see, fields can be accessed inside case expressions and case arguments. Notice that p.name is not a field accessor, but just a single variable: the . is part of its name. When Formality doesnâ€™t know the name of the matched value, you must must explicitly name it using the as keyword:

constructor.example_1 : {p : Person} -> String
  case/Person person(26, "John") as john
| person => john.age
: Word



